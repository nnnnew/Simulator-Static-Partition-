
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nnnnew
 */
public class SimulatorFrame extends javax.swing.JFrame {
    
    private static ArrayList<Integer> numberPartitionInMemory; // Temp for pass data
    
    private static int partitionNumber;
    private static int modeAlgorithms;
    private static Partition[] partitionList;
    private static ArrayList<Job> jobList;
    private static ArrayList<Job> finishedJob;
    private static int sizeMemory;
    private static ArrayList<String> logProcess;
    private static int statusStep;
    private static int workProcess;
    private static int timeUnits;
    private static int jobCount;

    /**
     * Creates new form SimulaterFram
     */
    public SimulatorFrame() {  
        logProcess = new ArrayList<String>();
        String str = String.format("Partition have %d segments. Size of memory is %d", partitionNumber, sizeMemory);
        logProcess.add(str);
        initComponents();
        partitionList = new Partition[partitionNumber];
        jobList = new ArrayList<Job>();
        finishedJob = new ArrayList<Job>();
        initPartition();
        setPartitionView();
        statusStep = 0;
        workProcess = 0;
        timeUnits = 0;
        jobCount = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jobListView = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        partitionListView = new javax.swing.JList<>();
        jobAddTextField = new javax.swing.JTextField();
        addJobButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        logProcessListView = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        finishButton = new javax.swing.JButton();
        nextStepButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        timeUnitsLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jobListView.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "no job in system" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jobListView);

        partitionListView.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(partitionListView);

        jobAddTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobAddTextFieldActionPerformed(evt);
            }
        });

        addJobButton.setText("Add ");
        addJobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJobButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("JOB");

        jLabel2.setText("PARTITION LIST");

        jLabel3.setText("JOB LIST");

        jLabel4.setFont(new java.awt.Font("TH Sarabun New", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 153));
        jLabel4.setText("SIMULATOR");

        logProcessListView.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { logProcess.get(0) };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(logProcessListView);

        jLabel5.setText("Log Process ");

        finishButton.setText("NEW");
        finishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtonActionPerformed(evt);
            }
        });

        nextStepButton.setText("NEXT STEP");
        nextStepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextStepButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Time Unit : ");

        timeUnitsLabel.setText("0");
        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jobAddTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(addJobButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2)))))
                                .addGap(96, 96, 96))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(0, 11, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(nextStepButton)
                                                .addGap(30, 30, 30)
                                                .addComponent(finishButton))
                                            .addComponent(timeUnitsLabel))
                                        .addGap(19, 19, 19))
                                    .addComponent(jScrollPane2))))
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jobAddTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJobButton)
                    .addComponent(nextStepButton)
                    .addComponent(finishButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timeUnitsLabel))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jobAddTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobAddTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jobAddTextFieldActionPerformed

    private void addJobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJobButtonActionPerformed
        int jobSize;
        try {
            jobSize = Integer.parseInt(jobAddTextField.getText().toString());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, 
                    "Please input positive number");
            return;
        }
        if(jobSize > sizeMemory) {
            JOptionPane.showMessageDialog(null, 
                    "Size of job is not fit to memory");
            return;
        }
        else if(jobSize <= 0) {
            JOptionPane.showMessageDialog(null, 
                    "Please input positive number");
            return;
        }
        else if(isOverPartition(jobSize)) {
            JOptionPane.showMessageDialog(null, 
                    "Job size is bigger");
            return;
        }
        Job newJob = new Job(jobCount, jobSize, timeUnits);
        jobList.add(newJob);
        ++jobCount;
        statusStep = 1;
        String logStr = String.format("Time %d: Job %d added to system", timeUnits, newJob.getJobNumber());
        updateLogProcess(logStr);
        updateJobList();
        if(modeAlgorithms == 1) {
            fitFirst(newJob);
        }
        else if(modeAlgorithms == 0) {
            bestFirst(newJob);
        }
        else {
            worstFit(newJob);
        }
    }//GEN-LAST:event_addJobButtonActionPerformed

    private void nextStepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextStepButtonActionPerformed
        ++timeUnits;
        timeUnitsLabel.setText(String.valueOf(timeUnits));
        for(int i = 0; i < partitionList.length; ++i) {
            if(!partitionList[i].isAvialable()) {
                int jobNumber = partitionList[i].getJobNumberInProcess();
                Job job = findJob(jobNumber);
                job.setJobSize(job.getJobSize() - 1);
                String str;
                if(job.getJobSize() == 0) {
                    job.setTimeExit(timeUnits);
                    finishedJob.add(job);
                    int indexJob = fineIndexJob(jobNumber);
                    str = String.format("Time %d: Job %d finish process", timeUnits, i);
                    job.setIsProcess(false);
                    jobList.remove(indexJob);
                    --workProcess;
                    partitionList[i].setAvialable(true);
                    partitionList[i].setJobNumberInProcess(-1);
                    updateJobList();
                }
                else {
                    str = String.format("Time %d: Job %d process is %d of %d", timeUnits, job.getJobNumber() ,job.getJobSize(), job.getJobSizeFinal());
                }
                setPartitionView();
                updateLogProcess(str);
            }
        }
        if(jobList.isEmpty()) {
            statusStep = 0;
        }
        if(statusStep != 0) {
            if(workProcess != partitionNumber) {
                for(int i = 0; i < jobList.size(); ++i) {
                    if(!jobList.get(i).isIsProcess()) {
                        updateLogProcess(String.format("Time %d: Job %d finding memory", timeUnits, jobList.get(i).getJobNumber()));
                        if(modeAlgorithms == 0) {
                            bestFirst(jobList.get(i));
                        }
                        else if(modeAlgorithms == 1) {
                            fitFirst(jobList.get(i));
                        }
                        else {
                            worstFit(jobList.get(i));
                        }
                    }
                }
            }
        }
        setPartitionView();
        updateJobList();
    }//GEN-LAST:event_nextStepButtonActionPerformed

    private void finishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtonActionPerformed
        
        dispose();
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainFrame mainFrame = new MainFrame();
                mainFrame.main(null);
            }
        });
    }//GEN-LAST:event_finishButtonActionPerformed

    private void fitFirst(Job job) {
        String str;
        for(int i = 0; i < partitionNumber; ++i) {
            if(partitionList[i].getSizeSegment() >= job.getJobSize() && partitionList[i].isAvialable()) {
                partitionList[i].setAvialable(false);
                partitionList[i].setJobNumberInProcess(job.getJobNumber());
                setPartitionView();
                job.setIsProcess(true);
                job.setTimeStart(timeUnits);
                job.setTimeAllocate(timeUnits);
                ++workProcess;
                str = String.format("Time %d: Job %d use memory segment %d", timeUnits, job.getJobNumber(), i);
                setPartitionView();
                updateLogProcess(str);
                updateJobList();
                return;
            }
        }
        str = String.format("Time %d: No partition avaliable", timeUnits);
        updateLogProcess(str);
        updateJobList();
    }
    
    private void bestFirst(Job job) {
        //int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int indexPartition = -1;
        for(int i = 0; i < partitionNumber; ++i) {
            if((partitionList[i].Avialable) && (partitionList[i].getSizeSegment() >= job.getJobSize())) {
                if(partitionList[i].getSizeSegment() - job.getJobSize() < min) { // partitionList[i].getSizeSegment() - job.getJobSize() > min
                    min = partitionList[i].getSizeSegment() - job.getJobSize(); // max = partitionList[i].getSizeSegment() - job.getJobSize();
                    indexPartition = i;
                }
            }
        }
        if(indexPartition != -1) {
            partitionList[indexPartition].setAvialable(false);
            partitionList[indexPartition].setJobNumberInProcess(job.getJobNumber());
            job.setIsProcess(true);
            job.setTimeStart(timeUnits);
            job.setTimeAllocate(timeUnits);
            ++workProcess;
            updateLogProcess(String.format("Time %d: Job %d use memory segment %d", timeUnits, job.getJobNumber(), indexPartition + 1));
            
        }
        else {
            updateLogProcess(String.format("Time %d: No partition avaliable", timeUnits));
        }
        setPartitionView();
        updateJobList();
    }
    
    private void worstFit(Job job) {
        int max = Integer.MIN_VALUE;
        int indexPartition = -1;
        for(int i = 0; i < partitionNumber; ++i) {
            if((partitionList[i].Avialable) && (partitionList[i].getSizeSegment() >= job.getJobSize())) {
                if(partitionList[i].getSizeSegment() - job.getJobSize() > max) { 
                    max = partitionList[i].getSizeSegment() - job.getJobSize(); 
                    indexPartition = i;
                }
            }
        }
        if(indexPartition != -1) {
            partitionList[indexPartition].setAvialable(false);
            partitionList[indexPartition].setJobNumberInProcess(job.getJobNumber());
            job.setIsProcess(true);
            job.setTimeStart(timeUnits);
            job.setTimeAllocate(timeUnits);
            ++workProcess;
            updateLogProcess(String.format("Time %d: Job %d use memory segment %d", timeUnits, job.getJobNumber(), indexPartition + 1));
            
        }
        else {
            updateLogProcess(String.format("Time %d: No partition avaliable", timeUnits));
        }
        setPartitionView();
        updateJobList();
    }
    
    /**
     * @param args the command line arguments
     */ 
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJobButton;
    private javax.swing.JButton finishButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jobAddTextField;
    private javax.swing.JList<String> jobListView;
    private javax.swing.JList<String> logProcessListView;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextStepButton;
    private javax.swing.JList<String> partitionListView;
    private javax.swing.JLabel timeUnitsLabel;
    // End of variables declaration//GEN-END:variables

    public int getPartitionNumber() {
        return partitionNumber;
    }

    public void setPartitionNumber(int partitionNumber) {
        this.partitionNumber = partitionNumber;
    }

    public int getModeAlgorithms() {
        return modeAlgorithms;
    }

    public void setModeAlgorithms(int modeAlgorithms) {
        this.modeAlgorithms = modeAlgorithms;
    }

    public ArrayList<Integer> getNumberPartitionInMemory() {
        return numberPartitionInMemory;
    }

    public void setNumberPartitionInMemory(ArrayList<Integer> numberPartitionInMemory) {
        this.numberPartitionInMemory = numberPartitionInMemory;
    }
    
    public void setSizeMemory(int size) {
        this.sizeMemory = size;
    }
    
    public int getSizeMemory() {
        return sizeMemory;
    }

    private void initPartition() {
        for(int i = 0; i < partitionNumber; ++i) {
            Partition newPartition = new Partition(i, numberPartitionInMemory.get(i));
            partitionList[i] = newPartition;
        }
    }
    
    private void setPartitionView() {
        DefaultListModel model = new DefaultListModel();
        for(int i = 0; i < partitionNumber; ++i) {
            Partition par = partitionList[i];
            String str = par.getString();
            if(par.isAvialable()) {
                str += "( Available )";
            }
            else {
                Job job = findJob(par.getJobNumberInProcess());
                str += "( Job " + job.getJobNumber() + " in process )" + " Fragment: " + (par.getSizeSegment() - job.getJobSizeFinal());
            }
            model.addElement(str);
        }
        partitionListView.setModel(model);
    }
    
    private void updateLogProcess(String str) {
        logProcess.add(str);
        DefaultListModel model = new DefaultListModel();
        for(int i = 0; i < logProcess.size(); ++i) {
            model.addElement(logProcess.get(i));
        }
        logProcessListView.setModel(model);
    }
    
    private Job findJob(int jobNumber) {
        for(int i = 0; i < jobList.size(); ++i) {
            if(jobList.get(i).getJobNumber() == jobNumber) {
                return jobList.get(i);
            }
        }
        return null;
    }
    
    private void updateJobList() {
        DefaultListModel model = new DefaultListModel();
        if(finishedJob.size() != 0) {
            for(int i = 0; i < finishedJob.size(); ++i) {
                String str = finishedJob.get(i).getString();
                str += ", Time Exit: " + finishedJob.get(i).getTimeExit() + ", Time Allocate: " + finishedJob.get(i).getTimeAllocate() + " ( Finished )";
                model.addElement(str);
            }
        }
        for(int i = 0; i < jobList.size(); ++i) {
            String str = jobList.get(i).getString();
            if(!jobList.get(i).isIsProcess()) {
                str += " " + "( Wait )";
            }
            else {
                str += " " + "Time Allocate: " + jobList.get(i).getTimeAllocate() +" ( Processing )";
            }
            model.addElement(str);
        }
        jobListView.setModel(model);
    }
    
    private int fineIndexJob(int jobNumber) {
        for(int i = 0; i < jobList.size(); ++i) {
            if(jobList.get(i).getJobNumber() == jobNumber) {
                return i;
            }
        }
        return -1;
    }
    
    private boolean isOverPartition(int jobSize) {
        int count = 0;
        for(int i = 0; i < partitionNumber; ++i) {
            if(jobSize > partitionList[i].getSizeSegment()) {
                ++count;
            }
        }
        if(count == partitionNumber) {
            return true;
        }
        return false;
    }
}
